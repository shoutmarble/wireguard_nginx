services:
  wireguard_hub:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard_hub
    cap_add:
      - NET_ADMIN
      - SYS_MODULE  # Optional, for kernel modules if needed
    environment:
      # "bash> id=" uid=0(root) gid=0(root) groups=0(root),988(docker)
      - PUID=0
      - PGID=0
      - TZ=Etc/UTC
      - SERVERURL=185.28.22.166
      - SERVERPORT=51820
      - PEERS=nginx,spoke1,spoke2,spoke3
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=0.0.0.0/0
      - LOG_CONFS=true
    volumes:
      - ./wg_config:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"
      - "80:80"
      - "443:443/tcp"
      - "443:443/udp"
      - "9090:9090"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wg show wg0 | grep -q 'interface: wg0' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # wg_nginx_proxy:
  #   image: lscr.io/linuxserver/wireguard:latest
  #   container_name: wg_nginx_proxy
  #   cap_add:
  #     - NET_ADMIN
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Etc/UTC
  #   volumes:
  #     - ./wg_nginx_proxy:/config
  #   sysctls:
  #     - net.ipv4.conf.all.src_valid_mark=1
  #   restart: unless-stopped
  #   depends_on:
  #     wireguard_hub:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD-SHELL", "wg show wg0 latest-handshakes | grep -q . || exit 1"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 30s

  nginx_proxy:
    image: nginx:latest
    container_name: nginx_proxy
    # network_mode: service:wg_nginx_proxy
    network_mode: service:wireguard_hub
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/ssl:ro
    restart: unless-stopped
    depends_on:
      # wg_nginx_proxy:
      #   condition: service_healthy
      wireguard_hub:
        condition: service_healthy

  wg_spoke_1:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wg_spoke_1
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./wg_spoke_1:/config
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
    depends_on:
      wireguard_hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wg show wg0 latest-handshakes | grep -q . || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  spoke_1:
    image: corentinth/it-tools:nightly
    container_name: whoami_spoke_1
    network_mode: service:wg_spoke_1
    restart: unless-stopped
    depends_on:
      wg_spoke_1:
        condition: service_healthy


  wg_spoke_2:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wg_spoke_2
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./wg_spoke_2:/config
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
    depends_on:
      wireguard_hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wg show wg0 latest-handshakes | grep -q . || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  spoke_2:
    image: traefik/whoami
    container_name: whoami_spoke_2
    network_mode: service:wg_spoke_2
    restart: unless-stopped
    depends_on:
      wg_spoke_2:
        condition: service_healthy


#   wg_spoke_3:
#     image: lscr.io/linuxserver/wireguard:latest
#     container_name: wg_spoke_3
#     cap_add:
#       - NET_ADMIN
#     environment:
#       - PUID=1000
#       - PGID=1000
#       - TZ=Etc/UTC
#     volumes:
#       - ./wg_spoke_3:/config
#     sysctls:
#       - net.ipv4.conf.all.src_valid_mark=1
#     restart: unless-stopped
#     depends_on:
#       wireguard_hub:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD-SHELL", "wg show wg0 latest-handshakes | grep -q . || exit 1"]
#       interval: 30s
#       timeout: 5s
#       retries: 3
#       start_period: 30s
# 
#   spoke_3:
#     image: traefik:v3.5
#     restart: unless-stopped
#     network_mode: service:wireguard_hub
#     command:
#       # - "--api=true"
#       # - "--api.dashboard=true"
#       # - "--api.insecure=false"
# 
#       - "--log.level=DEBUG"
#       - "--accesslog=true"
# 
#       - "--providers.docker.network=traefik"
#       - "--providers.docker.exposedByDefault=false"
#       - "--providers.file.filename=/dynamic_traefik.yml"
# 
#       # - "--entrypoints.dashboard.address=:9090"
#       - "--entrypoints.web.address=:80"
#       - "--entrypoints.websecure.address=:443"
#       - "--entrypoints.websecure.http3"
# 
#       - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
#       - "--entrypoints.web.http.redirections.entryPoint.scheme=https"            
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#       - "./certs:/certs"
#       - "./dynamic_traefik.yml:/dynamic_traefik.yml"
#     labels:
#       - "traefik.enable=true"
#   
#   whoami_spoke_3:
#     image: traefik/whoami
#     container_name: whoami_spoke_3
#     network_mode: service:wg_spoke_3
#     labels:
#       - 'traefik.enable=true'
#       - 'traefik.http.routers.whoami.rule=Host(`c.landingdev.xyz`)'
#       - 'traefik.http.routers.whoami.entrypoints=websecure'
#       - 'traefik.http.routers.whoami.tls=true'
#       - 'traefik.http.routers.whoami.service=whoami'
#       - 'traefik.http.services.whoami.loadbalancer.server.port=80'
